openapi: 3.0.0
info:
  title: API documentation
  description: >-
    The API provides functionality for managing users, rooms, and sessions in a
    voting system. It includes methods for creating and managing rooms, joining
    users to rooms, starting and managing voting sessions, and retrieving voting
    results. The API is divided into three main categories: **User Management**,
    **Room Management**, and **Session Management.**
  version: 1.0.0
servers:
  - url: http://127.0.0.1:8000
components:
  securitySchemes:
    noauthAuth:
      type: http
      scheme: noauth
tags:
  - name: User Management
    description: >-
      This section of the API provides methods for managing users, including
      joining them to rooms and retrieving information about the current user.
  - name: Rooms Management
    description: >-
      This section of the API provides methods for managing rooms, including
      creating them, retrieving information, deleting them, and managing room
      members and session history.
  - name: Session Management
    description: >-
      This section of the API provides methods for creating and managing voting
      sessions, including starting sessions, managing tasks, collecting and
      finalizing votes, and retrieving voting results.
paths:
  /api/v1/user/current:
    get:
      tags:
        - User Management
      summary: Get current user
      description: >-
        - **Description:** Retrieve information about the current user.
            
        - **Parameters:** None.
            
        - **Response:** Information about the current user (nickname, role,
        state, room).
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/user/join-room:
    post:
      tags:
        - User Management
      summary: Join room
      description: >-
        - **Описание:** Присоединение пользователя к комнате.
            
        - **Параметры:** Никнейм, идентификатор комнаты, выбранная роль
        (Наблюдатель/Голосующий).
            
        - **Ответ:** Информация о текущем пользователе, комнате и активной
        сессии (если есть).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                nickname: nickname
                room_id: 1
                role: participant
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/rooms:
    get:
      tags:
        - Rooms Management
      summary: Get list of rooms
      description: >-
        - **Description:** Get a list of available rooms.
            
        - **Parameters:** None.
            
        - **Response:** A list of rooms with information about each room (name,
        status, number of members).
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/room:
    post:
      tags:
        - Rooms Management
      summary: Create a room
      description: |-
        - **Description:** Create a new room.
            
        - **Parameters:** Room name.
            
        - **Response:** Information about the created room.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Room name
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/room/get/<room_id>/:
    get:
      tags:
        - Rooms Management
      summary: Get room info
      description: >-
        - **Description:** Retrieve information about a specific room.
            
        - **Parameters:** Room ID.
            
        - **Response:** Room information, list of participants, active session
        (if any).
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/room/del/<room_id>:
    delete:
      tags:
        - Rooms Management
      summary: Delete a room
      description: |-
        - **Description:** Deleting a room (available to the administrator).
            
        - **Parameters:** Room ID.
            
        - **Response:** Successful room deletion.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/room/<room_id>/participants:
    get:
      tags:
        - Rooms Management
      summary: Get room participants
      description: >-
        - **Description:** Retrieve a list of room participants.
            
        - **Parameters:** Room ID.
            
        - **Response:** List of participants with their roles and states
        (Pending Voting/Voting/Voted).
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/room/<room_id>/history:
    get:
      tags:
        - Rooms Management
      summary: Get room history
      description: >-
        - **Description:** Retrieve the history of all sessions in a room.
            
        - **Parameters:** Room ID.
            
        - **Response:** List of completed sessions with task information and
        voting results.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session:
    post:
      tags:
        - Session Management
      summary: Create session
      description: >-
        - **Description:** Create a new session for voting in a room.
            
        - **Parameters:** Room ID, task description.
            
        - **Response:** Information about the created session, including current
        state (Pending Voting/Voting).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                room_id: 1
                task_name: Task name
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session/<session_id>:
    get:
      tags:
        - Session Management
      summary: Get session
      description: >-
        - **Description:** Retrieve information about a specific session.
            
        - **Parameters:** Session ID.
            
        - **Response:** Information about the task, participants, their states,
        voting results.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session/<session_id>/vote:
    post:
      tags:
        - Session Management
      summary: Vote into session
      description: >-
        - **Description:** Sending the vote of a participant in the current
        session.
            
        - **Parameters:** Session ID, score value.
            
        - **Response:** Successful vote sending, updated voting and participant
        status.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties: {}
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session/<session_id>/end:
    post:
      tags:
        - Session Management
      summary: End session
      description: |-
        - **Description:** Ends the current round of voting.
            
        - **Parameters:** Session ID.
            
        - **Response:** Voting results, average score.
      requestBody:
        content: {}
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session/<int:session_id>/task:
    post:
      tags:
        - Session Management
      summary: Update session task
      description: |-
        - **Description:** Set the task for the current session.
            
        - **Parameters:** Session ID, task description.
            
        - **Response:** Successful task update, display new task.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                task_name: Task name
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/session/<session_id>/results:
    get:
      tags:
        - Session Management
      summary: Get session results
      description: >-
        - **Description:** Retrieve the results of a specific session.
            
        - **Parameters:** Session ID.
            
        - **Results:** Information about the task, participants' scores, average
        score.
      security:
        - noauthAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
